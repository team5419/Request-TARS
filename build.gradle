plugins {
    id "java"
    id "idea"
    id "edu.wpi.first.GradleRIO" version "2024.1.1-beta-3"
    id 'com.diffplug.spotless' version '6.12.0'
}

def javaVersion = JavaVersion.VERSION_11
sourceCompatibility = javaVersion
targetCompatibility = javaVersion

def ROBOT_MAIN_CLASS = "com.team5419.frc2023.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    project.logger.lifecycle('Checking if profile mode...')
                    //Enter profile mode with ./gradlew deploy -PprofileMode
                    if (frc.project.hasProperty("profileMode")) {
                        project.logger.lifecycle('Debug mode enabled!')
                        project.logger.lifecycle("Connect JMX client to 10.54.19.2:1099 for RoboRIO profiling with visualvm.")
                        jvmArgs.add("-Dcom.sun.management.jmxremote=true")
                        jvmArgs.add("-Dcom.sun.management.jmxremote.port=1099")
                        jvmArgs.add("-Dcom.sun.management.jmxremote.local.only=false")
                        jvmArgs.add("-Dcom.sun.management.jmxremote.ssl=false")
                        jvmArgs.add("-Dcom.sun.management.jmxremote.authenticate=false")
                        jvmArgs.add("-Djava.rmi.server.hostname=10.54.19.2")

                    }
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation platform("org.junit:junit-bom:5.8.2")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

test{
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

tasks.withType(JavaCompile) {
    // Configure string concat to always inline compile
    options.compilerArgs.add '-XDstringConcat=inline'
}

idea {
    project {
        // The project.sourceCompatibility setting is not always picked up, so we set explicitly
        languageLevel = javaVersion
    }
    module {
        // Improve development & (especially) debugging experience (and IDEA's capabilities) by having libraries' source & javadoc attached
        downloadJavadoc = true
        downloadSources = true
        // Exclude the .vscode directory from indexing and search
        excludeDirs+=file(".vscode" )
    }
}

// // Configure Spotless code formatter
// spotless {
//     java {
//         ratchetFrom 'origin/main' // Limit to files changed by this feature branch

//         target fileTree('.') {
//             include '**/*.java'
//             exclude '**/build/**', '**/build-*/**', 'venv/**'
//         }


//         toggleOffOn()
//         indentWithTabs()
//         googleJavaFormat()
//         removeUnusedImports()
//         trimTrailingWhitespace()
//         endWithNewline()

//         formatAnnotations()

//         licenseHeader '/* $YEAR - Team 5419 Berkelium */'
//     }
//     groovyGradle {
//         target fileTree('.') {
//             include '**/*.gradle'
//             exclude '**/build/**', '**/build-*/**', 'venv/**'
//         }
//         greclipse()
//         indentWithSpaces(4)
//         trimTrailingWhitespace()
//         endWithNewline()
//     }
//     format 'xml', {
//         target fileTree('.') {
//             include '**/*.xml'
//             exclude '**/build/**', '**/build-*/**', 'venv/**'
//         }
//         eclipseWtp('xml')
//         trimTrailingWhitespace()
//         indentWithSpaces(2)
//         endWithNewline()
//     }
//     format 'misc', {
//         target fileTree('.') {
//             include '**/*.md', '**/.gitignore'
//             exclude '**/build/**', '**/build-*/**', 'venv/**'
//         }
//         trimTrailingWhitespace()
//         indentWithSpaces(2)
//         endWithNewline()
//     }
//     python {
//         target fileTree('.') {
//             include '**/*.py'
//             exclude '**/build/**', '**/build-*/**', 'venv/**'
//         }
//         black("22.12.0")
//     }
// }
